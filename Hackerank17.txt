import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.function.*;
import java.util.regex.*;
import java.util.stream.*;
import static java.util.stream.Collectors.joining;
import static java.util.stream.Collectors.toList;


class Result {

    /*
     * Complete the 'doesCircleExist' function below.
     *
     * The function is expected to return a STRING_ARRAY.
     * The function accepts STRING_ARRAY commands as parameter.
     */

    public static List<String> doesCircleExist(List<String> commands) {
    // Write your code here
    int x = 0,y = 0,i; 
    int dir = 0; 
    List<String> ans = new ArrayList<String>();
    for(String words: commands)
    {
        for (i=0; i < words.length(); i++) 
        { 
            char move = words.charAt(i);
            if (move == 'R') 
                dir = (dir + 1)%4; 
            else if (move == 'L') 
                dir = (4 + dir - 1) % 4;
            else 
            { 
                if (dir == 0) 
                    y++; 
                else if (dir == 1) 
                    x++; 
                else if (dir == 2) 
                    y--; 
                else 
                    x--; 
            } 
        } 
        if(x == 0 && y == 0)
        {
            ans.add("YES");
        }
        else
        {
            ans.add("NO");
        }
    }
    return ans;
    }
}
public class Solution {
    public static void main(String[] args) throws IOException {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(System.in));
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int commandsCount = Integer.parseInt(bufferedReader.readLine().trim());

        List<String> commands = IntStream.range(0, commandsCount).mapToObj(i -> {
            try {
                return bufferedReader.readLine();
            } catch (IOException ex) {
                throw new RuntimeException(ex);
            }
        })
            .collect(toList());

        List<String> result = Result.doesCircleExist(commands);

        bufferedWriter.write(
            result.stream()
                .collect(joining("\n"))
            + "\n"
        );

        bufferedReader.close();
        bufferedWriter.close();
    }
}